////////////////////////////////////////////////
disparador que dicta auditoria a las entradas  /
////////////////////////////////////////////////
CREATE OR REPLACE FUNCTION CONTROL_AUDITORIA() RETURNS TRIGGER AS 
$$
	begin
		IF (TG_OP = 'DELETE' ) THEN 
			INSERT INTO TABLA_AUDITORIA ( "nombre_tabla", "operacion", "v_anterior", "v_nuevo", "fecha_modificacion", "usuario" )
			VALUES (TG_TABLE_NAME, 'D', OLD, '', current_date, USER);
			RETURN OLD;
		ELSIF (TG_OP = 'UPDATE' ) THEN 
			INSERT INTO TABLA_AUDITORIA ( "nombre_tabla", "operacion", "v_anterior", "v_nuevo", "fecha_modificacion", "usuario" )
			VALUES (TG_TABLE_NAME, 'U', OLD, NEW, current_date, USER);
			RETURN NEW;
		ELSIF (TG_OP = 'INSERT' ) THEN 
			INSERT INTO TABLA_AUDITORIA ( "nombre_tabla", "operacion", "v_anterior", "v_nuevo", "fecha_modificacion", "usuario" )
			VALUES (TG_TABLE_NAME, 'I', '', NEW, current_date, USER);
			RETURN NEW;
		END IF;
		RETURN NULL;
end
$$
LANGUAGE 'plpgsql' VOLATILE COST 100;
ALTER FUNCTION CONTROL_AUDITORIA() OWNER TO postgres;

////////////////////////////////////////////////////////////////////////

CREATE TRIGGER CONTROLAR_AUDITORIA AFTER INSERT OR DELETE OR UPDATE
ON 
estudiante FOR EACH ROW EXECUTE PROCEDURE CONTROL_AUDITORIA();

CREATE TRIGGER CONTROLAR_AUDITORIA BEFORE INSERT OR DELETE OR UPDATE
ON 
docente FOR EACH ROW EXECUTE PROCEDURE CONTROL_AUDITORIA();

CREATE TRIGGER CONTROLAR_AUDITORIA AFTER INSERT OR DELETE OR UPDATE
ON 
materia FOR EACH ROW EXECUTE PROCEDURE CONTROL_AUDITORIA();

///////////////////////////////////////////////////////////
//              Disparador para sacar edad               //
///////////////////////////////////////////////////////////

CREATE OR REPLACE FUNCTION funcion_saca_edad() RETURNS TRIGGER AS
$$
DECLARE edad date;
BEGIN
	edad := age(CURRENT_DATE, new.est_fec);
	RAISE NOTICE 'edad : %', edad;
	RAISE NOTICE '32131231';
	insert into estudiante (est_id, est_nom, est_fec) 
	values (000, 'juanito', edad);
	RETURN NEW;
END; 
$$
LANGUAGE 'plpgsql';
ALTER FUNCTION funcion_saca_edad() OWNER TO postgres;

CREATE TRIGGER trigger_saca_edad_1 AFTER INSERT 
ON estudiante
FOR EACH ROW EXECUTE PROCEDURE funcion_saca_edad ();

insert into estudiante(est_id, est_nom, est_fec) values (000, 'juanito', '09/10/96');


